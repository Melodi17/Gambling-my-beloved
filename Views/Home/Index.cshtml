@using Microsoft.AspNetCore.Identity
@using Gambling_my_beloved.Models.View

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "Home Page";
    ApplicationUser? currentUser = ViewData["User"] as ApplicationUser;
}

<h1 class="display-4">Welcome</h1>

<div class="row">
    <div class="col-md-8 col-12">
        @if (currentUser != null)
        {
            decimal profitPercentage = currentUser.GetTotalProfitPercentage();

            <h2 class="display-5">Statistics</h2>
            <hr/>

            <div class="container">
                <div class="col-lg-6 col-12">
                    <dl class="row">
                        <dt class="col-5">
                            @Html.DisplayNameFor(model => currentUser.Balance)
                        </dt>
                        <dd class="col-5">
                            @currentUser.Balance.ToCurrency()
                        </dd>
                        <dt class="col-5">
                            Net Worth
                        </dt>
                        <dd class="col-5">
                            @currentUser.GetNetWorth().ToCurrency()
                        </dd>

                        <dt class="col-5">
                            Total Investment
                        </dt>
                        <dd class="col-5">
                            @currentUser.GetTotalInvestment().ToCurrency()
                        </dd>
                        <dt class="col-5">
                            Total Value
                        </dt>
                        <dd class="col-5">
                            @currentUser.GetTotalValue().ToCurrency()
                        </dd>
                        <dt class="col-5">
                            Total Profit
                        </dt>
                        <dd class="col-5">
                            @currentUser.GetTotalProfit().ToCurrency() (@Html.DisplayFor(model => profitPercentage, "PriceChange"))
                        </dd>
                    </dl>
                </div>
                
                <div class="col-12">
                    <div id="chartContainer" style="height: 300px; width: 100%;"></div>
                    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
                    <script type="text/javascript">
                        window.onload = function () {
                            var result = @Html.Raw(ViewData["StockHistory"]);
                            this.console.log(result);
                            
                            // result is { Symbol: string, Color: string, History: { Date: string, Price: number, PriceText: string }[] }[]
                            
                            var ChartData = [];
                            
                            for (var i = 0; i < result.length; i++) {
                                var DataItem = [];
                                for (var j = 0; j < result[i].History.length; j++) {
                                    DataItem.push({
                                        x: new Date(result[i].History[j].Date),
                                        y: result[i].History[j].Price,
                                        label: "Stock: " + result[i].Symbol + ", Price: " + result[i].History[j].PriceText,
                                    });
                                }
                                
                                ChartData.push({
                                    type: "line",
                                    name: result[i].Symbol,
                                    showInLegend: true,
                                    dataPoints: DataItem,
                                    color: result[i].Color,
                                });
                            }
                            
                            var chart = new CanvasJS.Chart("chartContainer", {
                                zoomEnabled: true,
                                animationEnabled: true,
                                theme: "light2",
                                title: {
                                    text: "Portfolio Performance",
                                },
                                axisY: {
                                    title: "Price",
                                    prefix: "$",
                                },
                                legend: {
                                    cursor: "pointer",
                                    verticalAlign: "top",
                                    horizontalAlign: "center",
                                    dockInsidePlotArea: true,
                                },
                                data: ChartData,
                            });
                            
                            chart.render();
                        }
                    </script>
                </div>
            </div>

            <h2 class="display-5">Portfolio</h2>
            <hr/>

            <div class="container">
                <div class="row">
                    @{
                        List<StockViewModel> stockViewModels = (List<StockViewModel>)ViewData["StockViewModels"]!;
                    }

                    @foreach (StockViewModel stockViewModel in stockViewModels)
                    {
                        <div class="col-lg-6 col-md-12">
                            @Html.DisplayFor(modelItem => stockViewModel, "StockViewModel")
                            @if (stockViewModel != stockViewModels.Last())
                            {
                                <hr/>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="col">
        <h2 class="display-5">Recent news</h2>
        <hr/>

        <div class="row" style="overflow-y: scroll; height: 70vh;">
            @foreach (var item in ((IEnumerable<StockEvent>)ViewData["StockEvents"])!
                .Zip((IEnumerable<Stock[]>)ViewData["EffectedStocks"]!,
                    (stockEvent, stocks) => new { StockEvent = stockEvent, Stocks = stocks }))
            {
                <div class="col-12">
                    <div class="card m-2 ms-0">
                        <div class="card-body">
                            <h5 class="card-title">@item.StockEvent.Description</h5>

                            @foreach (Stock stock in item.Stocks)
                            {
                                decimal price = stock.GetHistoricalPrice(item.StockEvent.Date);
                                decimal priceChange = stock.GetPriceChangePercent(item.StockEvent.Date);
                                <div class="card mt-2">
                                    <div class="row">
                                        <div class="col-5">
                                            <a asp-controller="Stocks" asp-action="Details" asp-route-id="@stock.Id" class="stock-nameplate" style="background-color: @stock.Color">
                                                @stock.Symbol
                                            </a>
                                        </div>

                                        <div class="col centerfix-col">
                                            @price.ToCurrency()
                                        </div>

                                        <div class="col-auto me-2 centerfix-col">
                                            @Html.DisplayFor(modelItem => priceChange, "PriceChange")
                                        </div>
                                    </div>
                                </div>
                            }

                            <hr/>
                            <p class="card-text text-secondary">@item.StockEvent.Date</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>