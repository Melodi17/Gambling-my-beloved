@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Html
@model Gambling_my_beloved.Models.Stock

@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "Details";
    bool isSignedIn = SignInManager.IsSignedIn(User);
}

<h1>@Model.Symbol - @Model.Company.Name</h1>
<br/>

<div>
    <h4>Information</h4>
    <hr/>
    <div class="row">
        <div class="col-lg-4 col-12">
            <dl class="row">
                <dt class="col-5">
                    @Html.DisplayNameFor(model => model.Symbol)
                </dt>
                <dd class="col-5">
                    <div class="stock-nameplate" style="background-color: @Model.Color">@Model.Symbol</div>
                </dd>
                <dt class="col-5">
                    @Html.DisplayNameFor(model => model.Company)
                </dt>
                <dd class="col-5">
                    <a asp-controller="Companies" asp-action="Details" asp-route-id="@Model.Company.Id">
                        @Html.DisplayFor(model => model.Company.Name)
                    </a>
                </dd>
                <dt class="col-5">
                    @Html.DisplayNameFor(model => model.UnitPrice)
                </dt>
                <dd class="col-5">
                    @Model.UnitPrice.ToCurrency()
                </dd>
                <dt class="col-5">
                    @Html.DisplayNameFor(model => model.PriceChange)
                </dt>
                <dd class="col-5">
                    @Model.PriceChange.ToCurrency()
                </dd>
                <dt class="col-5 centerfix-col">
                    @Html.DisplayNameFor(model => model.PriceChangePercent)
                </dt>
                <dd class="col-5">
                    @Html.DisplayFor(model => model.PriceChangePercent, "PriceChangeBubble")
                </dd>
            </dl>
        </div>
        
        <div class="col-lg-4 col-12">
            <dl class="row">
                <dt class="col-5">
                    @Html.DisplayNameFor(model => model.Volatility)
                </dt>
                <dd class="col-5">
                    @Html.DisplayFor(model => model.Volatility)
                </dd>
                <dt class="col-5">
                    @Html.DisplayNameFor(model => model.Company.Controversy)
                </dt>
                <dd class="col-5">
                    @Html.DisplayFor(model => model.Company.Controversy)
                </dd>
            </dl>
        </div>

        @if (isSignedIn)
        {
            StockOwnership? stockOwnership = ViewData["StockOwnership"] as StockOwnership;
            int quantity = stockOwnership?.GetQuantity() ?? 0;
            decimal totalInvestment = stockOwnership?.GetTotalInvestment() ?? 0;

            <div class="col-lg-4 col-12">
                <dl class="row">
                    <dt class="col-5">
                        Owned shares
                    </dt>
                    <dd class="col-5">
                        @(quantity.ToString("N0"))
                    </dd>
                    <dt class="col-5">
                        Investment
                    </dt>
                    <dd class="col-5">
                        @totalInvestment.ToCurrency()
                    </dd>
                    <dt class="col-5">
                        Yield
                    </dt>
                    <dd class="col-5">
                        @(stockOwnership != null ? (quantity * Model.UnitPrice).ToCurrency() : "$0.00")
                        @* show percentage increase between total investment and yield *@
                        @if (stockOwnership != null && quantity != 0)
                        {
                            decimal yield = quantity * Model.UnitPrice;
                            decimal percentage = (yield - totalInvestment) / totalInvestment * 100;
                            <span>(</span>
                            @Html.DisplayFor(model => percentage, "PriceChange")
                            <span>)</span>
                        }
                    </dd>
                    <div class="col-5">
                        <a class="btn btn-secondary btn-sm">Transaction history</a>
                    </div>
                </dl>
            </div>
        }
    </div>

    @if (isSignedIn)
    {
        <h4>New Transaction</h4>
        <hr/>

        <form asp-action="Transact" method="post">
            <input type="hidden" name="stockId" value="@Model.Id"/>

            <div class="row" style="max-width: 500px">
                <div class="col-3">
                    <select name="type" class="form-control">
                        <option value="buy">Buy</option>
                        <option value="sell">Sell</option>
                    </select>
                </div>

                <div class="col">
                    <input type="number" id="quantity" name="quantity" class="form-control" placeholder="Quantity"/>
                </div>

                <div class="col-auto">
                    <input type="submit" value="Transact" class="btn btn-primary"/>
                </div>
            </div>
        </form>
    }

    <br/>

    <h4>History</h4>
    <hr/>

    <div id="chartContainer" style="height: 300px; width: 100%;"></div>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <script type="text/javascript">
        window.onload = function () {
            var result = @Html.Raw(ViewData["StockHistory"]);
            this.console.log(result);

            var DataItem = [];
            for (var i = 0; i < result.length; i++) {
                DataItem.push({
                    x: new Date(result[i].Date),
                    y: result[i].Price,
                });
            }
            
            var chart = new CanvasJS.Chart("chartContainer", {
                zoomEnabled: true,
                animationEnabled: true,
                theme: "light2",
                data: [{
                    markerSize: 0,
                    lineColor: "@Model.Color",
                    markerColor: "@Model.Color",
                    type: "line",
                    dataPoints: DataItem
                }]
            });
            chart.render();
        }
    </script>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>